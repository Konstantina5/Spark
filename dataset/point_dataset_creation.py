# -*- coding: utf-8 -*-
"""point_dataset_creation.ipynb

Automatically generated by Colaboratory.

"""

import sys
import csv
import argparse
import numpy as np
import os
from sklearn.preprocessing import MinMaxScaler

def correlated(dim, n, anti=False):
    mu = np.zeros(dim)
    r = np.ones((dim, dim))
    for i in range(dim):
        r[i][i] = 1.5
    l = np.random.multivariate_normal(mu, r, size=n)
    for d in range(l.shape[1]):
        col = l[:, d]
        l[:, d] = (col - col.min()) / (col.max() - col.min())
    if anti:
        l[:, 0] = l[:, 0].max() - l[:, 0]
    minmax = MinMaxScaler()
    return minmax.fit_transform(np.array(l))

def generate_data(data_distribution, total_points, dimensions, output_name):
  if data_distribution == "uniform":
    data = np.random.uniform(0, 1, (total_points, dimensions))
  elif data_distribution == "normal":
    data = np.random.normal(0, 1, (total_points, dimensions))
    minmax = MinMaxScaler()
    data = minmax.fit_transform(np.array(data))
  elif data_distribution == "correlated":
    data = correlated(dimensions, total_points)
  elif data_distribution == "anticorrelated":
    data = correlated(dimensions, total_points, True)

  folder_path = '../input/dimensions' + str(dimensions) +"/"
  os.makedirs(folder_path, exist_ok=True)
  with open(folder_path + output_name, 'w', newline='') as file:
    np.savetxt(folder_path + output_name, data, delimiter=' ')

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Generate data of certain distribution, size and dimension and save it to a CSV file.")
#   parser.add_argument("-dist", "--distribution", choices=["uniform", "normal", "correlated", "anticorrelated"], help="Data distribution type", required=True)
  parser.add_argument("-p", "--points", type=int, help="Total number of points", required=True)
  parser.add_argument("-dim", "--dimensions", type=int, help="Number of dimensions", required=True)
#   parser.add_argument("-o", "--output", help="Output CSV file name", required=True)

  distributions = ['uniform', 'normal', 'correlated', 'anticorrelated']

  args = parser.parse_args()

  for distribution in distributions:
    generate_data(distribution, args.points, args.dimensions, distribution + '' + str(args.points) + '.txt')


